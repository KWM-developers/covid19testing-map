{"version":3,"sources":["Components/Sidebar.tsx","Components/Pins.tsx","Components/Map.tsx","Components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TabPanel","props","children","value","index","Typography","component","role","hidden","id","aria-labelledby","Box","p","Sidebar","drawerOpen","toggleFilter","useState","tabIdx","setTab","SearchContext","Consumer","searchFilters","Drawer","variant","anchor","open","style","paddingTop","AppBar","position","Tabs","onChange","e","v","Tab","label","FormGroup","FormControlLabel","control","Switch","size","checked","Pins","this","data","onClick","onHover","map","place","key","longitude","lng","latitude","lat","onMouseOver","fontSize","PureComponent","Map","onClickPin","lockMap","bounds","mapboxgl","LngLatBounds","PLACES","forEach","extend","LngLat","boundedViewport","WebMercatorViewport","width","window","innerWidth","height","innerHeight","fitBounds","getNorthEast","toArray","getSouthWest","padding","offset","pitchMaybe","bearingMaybe","viewport","setViewport","layers","filteredPins","filter","Object","keys","console","log","initialViewState","controller","getCursor","onViewStateChange","zIndex","mapStyle","mapboxApiAccessToken","Header","toggleDrawer","Toolbar","color","background","IconButton","marginLeft","labelMap","defaultFilters","React","createContext","App","state","filters","currentPlace","location","items","push","Provider","Grid","className","container","direction","item","xs","setState","filterKey","Modal","maxWidth","margin","outline","onClose","disableAutoFocus","Card","CardHeader","title","subheader","trim","action","aria-label","CardContent","gutterBottom","List","dense","paddingBottom","marginBottom","idx","length","content","type","ListItem","ListItemAvatar","Avatar","icon","substr","ListItemText","primary","Link","href","secondary","CardActions","Button","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84501d07.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Drawer, Box, Typography, Tabs, Tab, AppBar,\n    FormGroup, FormControlLabel, Switch\n} from '@material-ui/core';\nimport { SearchContext } from '../App';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`tabpanel-${index}`}\n            aria-labelledby={`tab-${index}`}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\ntype SidebarProps = {\n    drawerOpen: boolean;\n    toggleFilter: Function\n}\n\nexport const Sidebar = ({ drawerOpen, toggleFilter }: SidebarProps) => {\n    const [tabIdx, setTab] = useState(0);\n\n    return <SearchContext.Consumer>\n        {\n            ( searchFilters ) => {\n                return <Drawer\n                    variant=\"persistent\"\n                    anchor=\"left\"\n                    open={drawerOpen}\n                >\n                    <div style={{ paddingTop: '48px' }}>\n                        <AppBar position=\"static\">\n                            <Tabs value={tabIdx} onChange={(e, v) => setTab(v)}>\n                                <Tab label=\"Filters\" />\n                                {0 ? <Tab label=\"Place\" /> : ''}\n                            </Tabs>\n                        </AppBar>\n\n                        <TabPanel value={tabIdx} index={0}>\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-verified']}\n                                    onChange={() => toggleFilter('is-verified')} />}\n                                    label=\"Verified\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-screening-patients']}\n                                    onChange={() => toggleFilter('is-location-screening-patients')} />}\n                                    label=\"Screening Patients\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-only-testing-patients-that-meet-criteria']}\n                                    onChange={() => toggleFilter('is-location-only-testing-patients-that-meet-criteria')} />}\n                                    label=\"Must Meet Criteria\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-by-appointment-only']}\n                                    onChange={() => toggleFilter('is-location-by-appointment-only')} />}\n                                    label=\"Appointment Only\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-collecting-specimens']}\n                                    onChange={() => toggleFilter('is-location-collecting-specimens')} />}\n                                    label=\"Collecting Specimens\"\n                                />\n                            </FormGroup>\n                        </TabPanel>\n\n                        {0 ? <TabPanel value={tabIdx} index={1}>\n\n                        </TabPanel> : ''}\n                    </div>\n                </Drawer>\n            }\n        }\n    </SearchContext.Consumer>;\n}","import React, { PureComponent } from 'react';\nimport { Marker } from 'react-map-gl';\n\nimport LocalHospital from '@material-ui/icons/LocalHospital';\n\nexport interface PinsProps {\n    data: any;\n    onClick: Function,\n    onHover: Function\n};\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nexport default class Pins extends PureComponent<PinsProps> {\n    render() {\n        const { data, onClick, onHover } = this.props;\n\n        // TODO: Make a real type for the place data\n        return data.map((place: any, index: number) => {\n            return (\n                <Marker key={`marker-${index}`} longitude={place.lng} latitude={place.lat}>\n                    <span\n                        onClick={() => onClick(place)}\n                        onMouseOver={() => onHover(place)}\n                        style={{ fontSize: '16px' }}\n                    >\n                        <LocalHospital />\n                    </span>\n                </Marker>\n            )\n        });\n    }\n}","\nimport React, { useState } from 'react';\n\nimport { DeckGL } from \"@deck.gl/react\";\nimport mapboxgl from 'mapbox-gl';\n\nimport { StaticMap } from 'react-map-gl';\nimport PLACES from '../data/data.json';\nimport Pins from './Pins';\nimport { WebMercatorViewport } from '@deck.gl/core';\nimport { SearchContext } from '../App';\n\n// COVID19 Mapbox public key\nconst token = 'pk.eyJ1IjoibWFydGluYW1wcyIsImEiOiJjazd3aDNoaTQwMjNuM2ZtZTRrcm1wOHlqIn0.1c2tf5eJPHyAvC1GgO4zzg';\n\ntype MapProps = {\n    onClickPin: Function;\n    lockMap: boolean;\n}\n\nexport const Map = ({ onClickPin, lockMap }: MapProps ) => {\n    const bounds = new mapboxgl.LngLatBounds();\n    PLACES.forEach(p => {\n        bounds.extend(new mapboxgl.LngLat(p.lng, p.lat));\n    });\n\n    const boundedViewport = {\n        ...new WebMercatorViewport({\n            width: window.innerWidth,\n            height: window.innerHeight\n        }).fitBounds([bounds.getNorthEast().toArray(), bounds.getSouthWest().toArray()], {\n            padding: 7,\n            offset: [40, 20]\n        }), pitchMaybe: 15, bearingMaybe: 108\n    };\n\n    const [viewport, setViewport] = useState(boundedViewport);\n    const layers: any = [];\n\n    return <SearchContext.Consumer>\n        {\n            (searchFilters) => {\n                const filteredPins = PLACES.filter(place => {\n\n                   /* export interface SearchFilters {\n                        'is-verified': boolean;\n                        'is-location-screening-patients': boolean;\n                        'is-location-collecting-specimens': boolean;\n                        'is-location-accepting-third-party-orders-for-testing': boolean;\n                        'is-location-only-testing-patients-that-meet-criteria': boolean;\n                        'is-location-by-appointment-only': boolean;\n                      }*/\n                    Object.keys(searchFilters).forEach(key => {\n\n                    });\n\n\n\n                    if (searchFilters['is-verified'] && place['is-verified'] !== 'TRUE') {\n                        console.log('excluding');\n                        return false;\n                    }\n\n                    if (searchFilters['is-location-collecting-specimens'] && place['is-location-collecting-specimens'] !== 'TRUE') {\n                        return false;\n                    }\n\n                    if (searchFilters['is-location-by-appointment-only'] && place['is-location-by-appointment-only'] !== 'TRUE') {\n                        return false;\n                    }\n\n                    if (searchFilters['is-location-only-testing-patients-that-meet-criteria'] && place['is-location-only-testing-patients-that-meet-criteria'] !== 'TRUE') {\n                        return false;\n                    }\n      \n                    return true;\n                });\n\n                return <DeckGL\n                    initialViewState={viewport}\n                    width=\"100vw\"\n                    height=\"100vh\"\n                    layers={layers}\n                    controller={!lockMap}\n                    getCursor={() => { return 'cursor'; }}\n                    onViewStateChange={(viewport) => setViewport({ ...viewport })}\n                >\n                    <StaticMap\n                        width=\"100vw\"\n                        height=\"100vh\"\n                        style={{ zIndex: 50 }}\n                        mapStyle='mapbox://styles/mapbox/streets-v11'\n                        mapboxApiAccessToken={token}\n                    >\n                        <Pins data={filteredPins} onClick={onClickPin} onHover={() => {}} />;\n                    </StaticMap>\n                </DeckGL>\n            }\n        }\n    </SearchContext.Consumer>;\n};\n","import React from 'react';\nimport { Toolbar, IconButton, AppBar, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\ntype HeaderProps = {\n    toggleDrawer: Function\n};\n\nexport const Header = ({ toggleDrawer }: HeaderProps) => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\" style={{padding: '0 7', color: 'white', background: '#0f75bb'}}>\n                {1 ?\n                <IconButton onClick={() => toggleDrawer()}>\n                    <MenuIcon style={{color: 'white', marginLeft: '-20'}} />\n                </IconButton> : ''}\n\n                <Typography variant=\"h5\">\n                    COVID-19 Testing Locations\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Sidebar } from './Components/Sidebar';\nimport { Map } from './Components/Map';\nimport { Header } from './Components/Header';\nimport { Card, CardContent, Typography, CardActions, Button, Modal, CardHeader, Link, List, ListItem, ListItemAvatar, Avatar, ListItemText, IconButton } from '@material-ui/core';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport CloseIcon from '@material-ui/icons/Close';\n\nexport const labelMap: any = {\n  'is-verified': 'Is Verified',\n  'is-location-screening-patients': 'Screening Patients',\n  'is-location-collecting-specimens': 'Collecting Specimens',\n  'is-location-accepting-third-party-orders-for-testing': 'Accepting 3rd party testing',\n  'is-location-only-testing-patients-that-meet-criteria': 'Testing criteria required',\n  'is-location-by-appointment-only': 'Appointment only'\n};\n\nexport interface SearchFilters {\n  'is-verified': boolean;\n  'is-location-screening-patients': boolean;\n  'is-location-collecting-specimens': boolean;\n  'is-location-accepting-third-party-orders-for-testing': boolean;\n  'is-location-only-testing-patients-that-meet-criteria': boolean;\n  'is-location-by-appointment-only': boolean;\n}\n\n// Initial state\nconst defaultFilters: SearchFilters = {\n  'is-verified': true,\n  'is-location-screening-patients': true,\n  'is-location-collecting-specimens': false,\n  'is-location-accepting-third-party-orders-for-testing': false,\n  'is-location-only-testing-patients-that-meet-criteria': false,\n  'is-location-by-appointment-only': false\n};\n\ninterface AppState {\n  filters: SearchFilters;\n  drawerOpen: boolean;\n  currentPlace: any;\n}\n\nexport const SearchContext = React.createContext<SearchFilters>(defaultFilters);\n\nexport class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      filters: defaultFilters,\n      currentPlace: null,\n      drawerOpen: false\n    };\n  }\n\n  render() {\n    const location = this.state.currentPlace;\n\n    let items: any = [\n      {\n        'title': 'Type',\n        'key': 'location-place-of-service-type',\n        'icon': <InfoIcon />\n      },\n      {\n        'title': 'Website',\n        'key': 'location-contact-url-main',\n        'icon': <LanguageIcon />\n      },\n      {\n        'title': 'Testing Criteria',\n        'key': 'location-specific-testing-criteria',\n        'icon': <LanguageIcon />\n      }\n    ];\n\n    Object.keys(labelMap).forEach(key => {\n      items.push({\n        'type': 'boolean',\n        'title': labelMap[key],\n        'key': key,\n        'icon': <InfoIcon />\n      });\n    });\n\n\n    return (\n      <SearchContext.Provider value={this.state.filters}>\n        <Grid className=\"container\" container direction=\"row\">\n          <Grid container item xs={12} style={{ zIndex: 30, height: 40 }}>\n            <Header toggleDrawer={() => this.setState({ drawerOpen: !this.state.drawerOpen })} />\n          </Grid>\n        </Grid>\n\n        <Grid container direction=\"column\">\n          <Grid container item xs={4} style={{ zIndex: 20 }}>\n            <Sidebar drawerOpen={this.state.drawerOpen} toggleFilter={(filterKey: keyof SearchFilters) => {\n              this.setState({\n                filters: { ...this.state.filters, [filterKey]: !this.state.filters[filterKey] }\n              });\n            } } />\n          </Grid>\n\n          <Grid onClick={() => {\n            if (this.state.drawerOpen) {\n              this.setState({ drawerOpen: false });\n            }\n          }} container item xs={12}>\n            <Map lockMap={false} onClickPin={(place: any) => {\n              this.setState({ currentPlace: place });\n            }} />\n\n            {location === null ? '' : (\n              <Modal\n                style={{ width: '90%', maxWidth: 600, padding: 10, margin: '0 auto', outline: 0 }}\n                onClose={() => this.setState({ currentPlace: null })}\n                disableAutoFocus={true} open\n              >\n                <Card style={{ outline: 0 }}>\n                  <CardHeader\n                    title={location['location-name']}\n                    subheader={\n                      location['location-address-street'].trim() + ', '\n                      + location['location-address-locality'].trim()\n                      + ', ' + location['location-address-region'].trim()\n                      + ' ' + location['location-address-postal-code'].trim()\n                    }\n                    action={\n                      <IconButton aria-label=\"close\"\n                        onClick={() => this.setState({ currentPlace: null })}>\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                  />\n\n                  <CardContent>\n                    <Typography color=\"textPrimary\" gutterBottom>\n                      {location['additional-information-for-patients']}\n                    </Typography>\n\n                    <List dense={true} style={{ paddingBottom: 0, marginBottom: 0, fontSize: 12 }}>\n                      {items.map((item: any, idx: number) => {\n                        if (location[item.key].length === 0) {\n                          return '';\n                        }\n\n                        let content = location[item.key];\n                        if (item.type === 'boolean') {\n                          content = content === 'TRUE' ? '✅' : '🔴';\n                        }\n\n                        return (\n                          <ListItem key={idx}>\n                            <ListItemAvatar>\n                              <Avatar>\n                                {item.icon}\n                              </Avatar>\n                            </ListItemAvatar>\n                            {location[item.key].substr(0, 4) === 'http'\n                              ? <ListItemText primary={<Link href={location[item.key]}>{location[item.key]}</Link>} />\n                              : <ListItemText primary={item.title} secondary={content} />}\n                          </ListItem>\n                        )\n                      })}\n                    </List>\n                  </CardContent>\n\n                  {location['location-contact-phone-main'] === '' ? '' : (\n                    <CardActions>\n                      <Button size=\"small\" href={'tel://' + location['location-contact-phone-main']}>\n                        Call Main Line ({location['location-contact-phone-main']})\n                      </Button>\n                    </CardActions>\n                  )}\n\n                  {location['location-contact-phone-appointments'] === '' ? '' : (\n                    <CardActions>\n                      <Button size=\"small\" href={'tel://' + location['location-contact-phone-appointments']}>\n                        Call Appointments Line ({location['location-contact-phone-appointments']})\n                      </Button>\n                    </CardActions>\n                  )}\n                </Card>\n              </Modal>\n            )}\n          </Grid>\n        </Grid>\n      </SearchContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}