{"version":3,"sources":["Components/Sidebar.tsx","Components/Pins.tsx","Components/Map.tsx","Components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TabPanel","props","children","value","index","Typography","component","role","hidden","id","aria-labelledby","Box","p","Sidebar","drawerOpen","toggleFilter","useState","tabIdx","setTab","SearchContext","Consumer","searchFilters","Drawer","variant","anchor","open","style","paddingTop","AppBar","position","Tabs","onChange","e","v","Tab","label","FormGroup","FormControlLabel","control","Switch","size","checked","Divider","margin","padding","width","Pins","this","data","onClick","onHover","map","place","key","longitude","lng","latitude","lat","onMouseOver","viewBox","fontSize","PureComponent","Map","onClickPin","lockMap","bounds","mapboxgl","LngLatBounds","PLACES","forEach","extend","LngLat","zoom","viewport","setViewport","layers","filteredPins","filter","Object","keys","initialViewState","height","controller","getCursor","onViewStateChange","glOptions","onError","console","error","zIndex","mapStyle","mapboxApiAccessToken","display","top","left","positionOptions","enableHighAccuracy","trackUserLocation","Header","toggleDrawer","Toolbar","color","background","IconButton","marginLeft","labelMap","defaultFilters","React","createContext","App","state","filters","currentPlace","location","items","details","push","Provider","Grid","className","container","direction","item","xs","setState","filterKey","Modal","overflow","maxWidth","outline","onClose","disableAutoFocus","Card","CardHeader","title","subheader","trim","action","aria-label","CardContent","gutterBottom","List","dense","paddingBottom","marginBottom","idx","length","ListItem","ListItemAvatar","Avatar","icon","substr","ListItemText","wordWrap","textOverflow","primary","Link","href","secondary","content","CardActions","Button","paragraph","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ff245d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Drawer, Box, Typography, Tabs, Tab, AppBar,\n    FormGroup, FormControlLabel, Switch, Divider\n} from '@material-ui/core';\nimport { SearchContext } from '../App';\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nconst TabPanel = (props: TabPanelProps) => {\n    const { children, value, index } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`tabpanel-${index}`}\n            aria-labelledby={`tab-${index}`}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\ntype SidebarProps = {\n    drawerOpen: boolean;\n    toggleFilter: Function\n}\n\nexport const Sidebar = ({ drawerOpen, toggleFilter }: SidebarProps) => {\n    const [tabIdx, setTab] = useState(0);\n\n    return <SearchContext.Consumer>\n        {\n            ( searchFilters ) => {\n                return <Drawer\n                    variant=\"persistent\"\n                    anchor=\"left\"\n                    open={drawerOpen}\n                >\n                    <div style={{ paddingTop: '48px' }}>\n                        <AppBar position=\"static\">\n                            <Tabs value={tabIdx} onChange={(e, v) => setTab(v)}>\n                                <Tab label=\"Filters\" />\n                                {0 ? <Tab label=\"Place\" /> : ''}\n                            </Tabs>\n                        </AppBar>\n\n                        <TabPanel value={tabIdx} index={0}>\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-verified']}\n                                    onChange={() => toggleFilter('is-verified')} />}\n                                    label=\"Verified\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-screening-patients']}\n                                    onChange={() => toggleFilter('is-location-screening-patients')} />}\n                                    label=\"Screening Patients\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-only-testing-patients-that-meet-criteria']}\n                                    onChange={() => toggleFilter('is-location-only-testing-patients-that-meet-criteria')} />}\n                                    label=\"Must Meet Criteria\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-by-appointment-only']}\n                                    onChange={() => toggleFilter('is-location-by-appointment-only')} />}\n                                    label=\"Appointment Only\"\n                                />\n\n                                <FormControlLabel\n                                    control={<Switch size=\"small\" checked={searchFilters['is-location-collecting-specimens']}\n                                    onChange={() => toggleFilter('is-location-collecting-specimens')} />}\n                                    label=\"Collecting Specimens\"\n                                />\n                            </FormGroup>\n\n\n                            <Divider style={{margin: 10}} />\n                            <Typography style={{padding: 10, width: 260}}>\n                                If this is a medical emergency stop and call 911. If you are experiencing fever, chills, cough, headache or another flu-like symptom CALL BEFORE you head to any healthcare facility.\n                            </Typography>\n\n                        </TabPanel>\n\n                        {0 ? <TabPanel value={tabIdx} index={1}>\n\n                        </TabPanel> : ''}\n                    </div>\n                </Drawer>\n            }\n        }\n    </SearchContext.Consumer>;\n}","import React, { PureComponent } from 'react';\nimport { Marker } from 'react-map-gl';\n\nimport LocalHospital from '@material-ui/icons/LocalHospital';\n\nexport interface PinsProps {\n    data: any;\n    onClick: Function,\n    onHover: Function\n};\n\n// Important for perf: the markers never change, avoid rerender when the map viewport changes\nexport default class Pins extends PureComponent<PinsProps> {\n    render() {\n        const { data, onClick, onHover } = this.props;\n\n        // TODO: Make a real type for the place data\n        return data.map((place: any, index: number) => {\n            return (\n                <Marker key={`marker-${index}`} longitude={place.lng} latitude={place.lat}>\n                    <span\n                        onClick={() => onClick(place)}\n                        onMouseOver={() => onHover(place)}\n                    >\n                        <LocalHospital viewBox=\"0 0 24 24\" style={{ fontSize: '11px' }} />\n                    </span>\n                </Marker>\n            )\n        });\n    }\n}","\nimport React, { useState } from 'react';\n\nimport { DeckGL } from \"@deck.gl/react\";\nimport mapboxgl from 'mapbox-gl';\n\nimport { StaticMap, GeolocateControl } from 'react-map-gl';\nimport PLACES from '../data/data.json';\nimport Pins from './Pins';\nimport { WebMercatorViewport } from '@deck.gl/core';\nimport { SearchContext } from '../App';\n\n// COVID19 Mapbox public key\nconst token = 'pk.eyJ1IjoibWFydGluYW1wcyIsImEiOiJjazd3aDNoaTQwMjNuM2ZtZTRrcm1wOHlqIn0.1c2tf5eJPHyAvC1GgO4zzg';\n\ntype MapProps = {\n    onClickPin: Function;\n    lockMap: boolean;\n}\n\nexport const Map = ({ onClickPin, lockMap }: MapProps ) => {\n    const bounds = new mapboxgl.LngLatBounds();\n    PLACES.forEach(p => {\n        bounds.extend(new mapboxgl.LngLat(p.lng, p.lat));\n    });\n\n    const boundedViewport = {\n        longitude: -98,\n        latitude: 38.5,\n        zoom: 5,\n    }\n    \n    /*{\n        ...new WebMercatorViewport({\n            width: window.innerWidth,\n            height: window.innerHeight\n        }).fitBounds([bounds.getNorthEast().toArray(), bounds.getSouthWest().toArray()], {\n            padding: 7,\n            offset: [40, 20]\n        }), pitchMaybe: 15, bearingMaybe: 108\n    };*/\n\n    const [viewport, setViewport] = useState(boundedViewport);\n    const layers: any = [];\n\n    return <SearchContext.Consumer>\n        {\n            (searchFilters) => {\n                const filteredPins = PLACES.filter(place => {\n                    Object.keys(searchFilters).forEach(key => {\n\n                    });\n\n                    if (searchFilters['is-verified'] && place['is-verified'] !== 'TRUE') {\n                        return false;\n                    }\n\n                    if (searchFilters['is-location-collecting-specimens'] && place['is-location-collecting-specimens'] !== 'TRUE') {\n                        return false;\n                    }\n\n                    if (searchFilters['is-location-by-appointment-only'] && place['is-location-by-appointment-only'] !== 'TRUE') {\n                        return false;\n                    }\n\n                    if (searchFilters['is-location-only-testing-patients-that-meet-criteria'] && place['is-location-only-testing-patients-that-meet-criteria'] !== 'TRUE') {\n                        return false;\n                    }\n      \n                    return true;\n                });\n\n                return <DeckGL\n                    initialViewState={viewport}\n                    width=\"100vw\"\n                    height=\"100vh\"\n                    layers={layers}\n                    controller={!lockMap}\n                    getCursor={() => { return 'cursor'; }}\n                    onViewStateChange={(viewport: any) => setViewport({ ...viewport })}\n                    // @ts-ignore\n                    glOptions={{onError: console.error}}\n                >\n                    <StaticMap\n                        width=\"100vw\"\n                        height=\"100vh\"\n                        style={{ zIndex: 50 }}\n                        mapStyle='mapbox://styles/mapbox/streets-v11'\n                        mapboxApiAccessToken={token}\n                    >\n                        <div style={{display: 'none', top: 62, left: 15, position: 'absolute', zIndex: 1}}>\n                            <GeolocateControl\n                                positionOptions={{enableHighAccuracy: true}}\n                                trackUserLocation={true}\n                            />\n                        </div>\n                        <Pins data={filteredPins} onClick={onClickPin} onHover={() => {}} />;\n                    </StaticMap>\n                </DeckGL>\n            }\n        }\n    </SearchContext.Consumer>;\n};\n","import React from 'react';\nimport { Toolbar, IconButton, AppBar, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\ntype HeaderProps = {\n    toggleDrawer: Function\n};\n\nexport const Header = ({ toggleDrawer }: HeaderProps) => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\" style={{padding: '0 7', color: 'white', background: '#0f75bb'}}>\n                {1 ?\n                <IconButton onClick={() => toggleDrawer()}>\n                    <MenuIcon style={{color: 'white', marginLeft: '-20'}} />\n                </IconButton> : ''}\n\n                <Typography variant=\"h5\">\n                    COVID-19 Testing Locations\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Sidebar } from './Components/Sidebar';\nimport { Map } from './Components/Map';\nimport { Header } from './Components/Header';\nimport { Card, CardContent, Typography, CardActions, Button, Modal, CardHeader, Link, List, ListItem, ListItemAvatar, Avatar, ListItemText, IconButton, Divider } from '@material-ui/core';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport CloseIcon from '@material-ui/icons/Close';\n\nexport const labelMap: any = {\n  'is-verified': 'Include public health offices',\n  'is-location-screening-patients': 'Checks patients for symptoms',\n  'is-location-collecting-specimens': 'Offers COVID-19 testing',\n  'is-location-accepting-third-party-orders-for-testing': 'Accepting 3rd party testing',\n  'is-location-only-testing-patients-that-meet-criteria': 'Patients Must meet testing criteria',\n  'is-location-by-appointment-only': 'Requires appointment'\n};\n\nexport interface SearchFilters {\n  'is-verified': boolean;\n  'is-location-screening-patients': boolean;\n  'is-location-collecting-specimens': boolean;\n  'is-location-accepting-third-party-orders-for-testing': boolean;\n  'is-location-only-testing-patients-that-meet-criteria': boolean;\n  'is-location-by-appointment-only': boolean;\n}\n\n// Initial state\nconst defaultFilters: SearchFilters = {\n  'is-verified': true,\n  'is-location-screening-patients': true,\n  'is-location-collecting-specimens': false,\n  'is-location-accepting-third-party-orders-for-testing': false,\n  'is-location-only-testing-patients-that-meet-criteria': false,\n  'is-location-by-appointment-only': false\n};\n\ninterface AppState {\n  filters: SearchFilters;\n  drawerOpen: boolean;\n  currentPlace: any;\n}\n\nexport const SearchContext = React.createContext<SearchFilters>(defaultFilters);\n\nexport class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      filters: defaultFilters,\n      currentPlace: null,\n      drawerOpen: false\n    };\n  }\n\n  render() {\n    const location = this.state.currentPlace;\n\n    let items: any = [\n      {\n        'title': 'Type',\n        'key': 'location-place-of-service-type',\n        'icon': <InfoIcon />\n      },\n      {\n        'title': 'Website',\n        'key': 'location-contact-url-main',\n        'icon': <LanguageIcon />\n      },\n      {\n        'title': 'Testing Criteria',\n        'key': 'location-specific-testing-criteria',\n        'icon': <LanguageIcon />\n      }\n    ];\n\n    let details: any = [];\n    Object.keys(labelMap).forEach(key => {\n      details.push({\n        'type': 'boolean',\n        'title': labelMap[key],\n        'key': key,\n        'icon': <InfoIcon />\n      });\n    });\n\n\n    return (\n      <SearchContext.Provider value={this.state.filters}>\n        <Grid className=\"container\" container direction=\"row\">\n          <Grid container item xs={12} style={{ zIndex: 30, height: 40 }}>\n            <Header toggleDrawer={() => this.setState({ drawerOpen: !this.state.drawerOpen })} />\n          </Grid>\n        </Grid>\n\n        <Grid container direction=\"column\">\n          <Grid container item xs={4} style={{ zIndex: 20 }}>\n            <Sidebar drawerOpen={this.state.drawerOpen} toggleFilter={(filterKey: keyof SearchFilters) => {\n              this.setState({\n                filters: { ...this.state.filters, [filterKey]: !this.state.filters[filterKey] }\n              });\n            } } />\n          </Grid>\n\n          <Grid onClick={() => {\n            if (this.state.drawerOpen) {\n              this.setState({ drawerOpen: false });\n            }\n          }} container item xs={12}>\n            <Map lockMap={false} onClickPin={(place: any) => {\n              this.setState({ currentPlace: place });\n            }} />\n\n            {location === null ? '' : (\n              <Modal\n                style={{ width: '90%', height: '95%', overflow: 'auto', maxWidth: 600, padding: 10, margin: '0 auto', outline: 0 }}\n                onClose={() => this.setState({ currentPlace: null })}\n                disableAutoFocus={true} open\n              >\n                <Card style={{ outline: 0 }}>\n                  <CardHeader\n                    title={location['location-name']}\n                    subheader={\n                      location['location-address-street'].trim() + ', '\n                      + location['location-address-locality'].trim()\n                      + ', ' + location['location-address-region'].trim()\n                      + ' ' + location['location-address-postal-code'].trim()\n                    }\n                    action={\n                      <IconButton aria-label=\"close\"\n                        onClick={() => this.setState({ currentPlace: null })}>\n                        <CloseIcon />\n                      </IconButton>\n                    }\n                  />\n\n                  <CardContent>\n                    <Typography color=\"textPrimary\" gutterBottom>\n                      {location['additional-information-for-patients']}\n                    </Typography>\n\n                    <List dense={true} style={{ paddingBottom: 0, marginBottom: 0, fontSize: 12 }}>\n                      {items.map((item: any, idx: number) => {\n                        if (location[item.key].length === 0) {\n                          return '';\n                        }\n\n                        return (\n                          <ListItem key={idx}>\n                            <ListItemAvatar>\n                              <Avatar>\n                                {item.icon}\n                              </Avatar>\n                            </ListItemAvatar>\n                            {location[item.key].substr(0, 4) === 'http'\n                              ? <ListItemText style={{wordWrap: 'break-word', textOverflow: 'ellipsis'}} \n                                primary={<Link href={location[item.key]}>{location[item.key]}</Link>} />\n                              : <ListItemText primary={item.title} secondary={location[item.key]} />}\n                          </ListItem>\n                        )\n                      })}\n                    </List>\n\n                    <Divider style={{margin: 10}} />\n\n                    <Typography variant=\"h6\">Details about this location</Typography>\n                    <List>\n                    {details.map((item: any, idx: number) => {\n                        const content = location[item.key] === 'TRUE' ? '✅' : '🔴';\n                        return (\n                          <ListItem key={idx}>\n                            <ListItemText primary={content + ' ' + item.title} />\n                          </ListItem>\n                        )\n                      })}\n                    </List>\n\n                  </CardContent>\n\n                  {location['location-contact-phone-main'] === '' ? '' : (\n                    <CardActions>\n                      <Button size=\"small\">\n                        <Link href={'tel://' + location['location-contact-phone-main']}>\n                          Call Main Line ({location['location-contact-phone-main']})\n                        </Link>\n                      </Button>\n                    </CardActions>\n                  )}\n\n                  {location['location-contact-phone-appointments'] === '' ? '' : (\n                    <CardActions>\n                      <Button size=\"small\" >\n                        <Link href={'tel://' + location['location-contact-phone-appointments']}>\n                          Call Appointments Line ({location['location-contact-phone-appointments']})\n                        </Link>\n                      </Button>\n                    </CardActions>\n                  )}\n\n                  <Divider style={{margin: 10}} />\n\n                  <Typography paragraph={true} style={{padding: 10}}>\n                  At this point in time, appointments for COVID-19 screening and testing are required at virtually every location - make sure to call or book ahead\n                  </Typography>\n\n                  <CardActions>\n                    <Button size=\"small\">\n                      <Link href=\"https://docs.google.com/forms/d/e/1FAIpQLSfYpEDiV8MwkBSVa7rKI_OzrmtGvclzgFzvcjxocLJncJOXDQ/viewform?usp=sf_link\">\n                        Report An Error\n                      </Link>\n                    </Button>\n\n                    <Button size=\"small\">\n                      <Link href=\"https://docs.google.com/forms/d/e/1FAIpQLScK-lqYZAr6MdeN1aafCrcXKR0cc96Ym-mzwz-4h3OgTpAvyQ/viewform?usp=sf_link\">\n                        Suggest An Edit\n                      </Link>\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Modal>\n            )}\n          </Grid>\n        </Grid>\n      </SearchContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}